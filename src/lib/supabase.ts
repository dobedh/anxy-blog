import { createBrowserClient } from '@supabase/ssr'
import { SupabaseClient } from '@supabase/supabase-js'

// Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ± Ìï®Ïàò (Î∏åÎùºÏö∞Ï†ÄÏö© - PKCE ÏΩîÎìú Í≤ÄÏ¶ùÍ∏∞Î•º Ïø†ÌÇ§Ïóê Ï†ÄÏû•)
// NOTE: Ïã±Í∏ÄÌÜ§ Ï∫êÏã± Ï†úÍ±∞Îê® - @supabase/ssrÏù¥ ÎÇ¥Î∂ÄÏ†ÅÏúºÎ°ú ÏÑ∏ÏÖòÏùÑ Ïø†ÌÇ§Î•º ÌÜµÌï¥ Í¥ÄÎ¶¨ÌïòÎØÄÎ°ú
// Îß§Î≤à ÏÉàÎ°úÏö¥ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Î•º ÏÉùÏÑ±Ìï¥ÎèÑ ÌòÑÏû¨ Ïù∏Ï¶ù ÏÑ∏ÏÖòÏù¥ Ïò¨Î∞îÎ•¥Í≤å Ï†ÅÏö©Îê©ÎãàÎã§.
// Ïù¥Î•º ÌÜµÌï¥ RLS Ï†ïÏ±ÖÏù¥ auth.uid()Î•º Ï†ïÌôïÌïòÍ≤å Ïù∏ÏãùÌï† Ïàò ÏûàÏäµÎãàÎã§.
export const getSupabaseClient = (): SupabaseClient => {
  // ÏÑúÎ≤Ñ ÏÇ¨Ïù¥Îìú Î†åÎçîÎßÅ Ï§ëÏóêÎäî ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ± Ïïà Ìï®
  if (typeof window === 'undefined') {
    throw new Error('getSupabaseClient should only be called on the client side')
  }

  // ÌôòÍ≤ΩÎ≥ÄÏàò Í∞ÄÏ†∏Ïò§Í∏∞ - Ìï®Ïàò ÎÇ¥Î∂ÄÏóêÏÑú ÎèôÏ†ÅÏúºÎ°ú ÏùΩÍ∏∞ (HMR ÎåÄÏùë)
  const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL
  const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

  // ÌôòÍ≤Ω Î≥ÄÏàò Í≤ÄÏ¶ù
  if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
    const errorMsg = `
      ‚ùå Supabase ÌôòÍ≤Ω Î≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.

      ÌïÑÏöîÌïú ÌôòÍ≤Ω Î≥ÄÏàò:
      - NEXT_PUBLIC_SUPABASE_URL: ${SUPABASE_URL ? '‚úÖ ÏÑ§Ï†ïÎê®' : '‚ùå ÎàÑÎùΩ'}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY ? '‚úÖ ÏÑ§Ï†ïÎê®' : '‚ùå ÎàÑÎùΩ'}

      Ìï¥Í≤∞ Î∞©Î≤ï:
      1. .env.local ÌååÏùºÏóê ÌôòÍ≤Ω Î≥ÄÏàòÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
      2. ÌôòÍ≤Ω Î≥ÄÏàò Ïù¥Î¶ÑÏù¥ Ï†ïÌôïÌïúÏßÄ ÌôïÏù∏ (NEXT_PUBLIC_ Ï†ëÎëêÏÇ¨ ÌïÑÏàò)
      3. Í∞úÎ∞ú ÏÑúÎ≤ÑÎ•º Ïû¨ÏãúÏûë (npm run dev)
      4. VercelÏóê Î∞∞Ìè¨Ìïú Í≤ΩÏö∞ ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï ÌôïÏù∏
    `
    console.error(errorMsg)
    throw new Error('Missing Supabase environment variables. Check console for details.')
  }

  // Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ± - @supabase/ssr ÏÇ¨Ïö©ÏúºÎ°ú PKCE ÏΩîÎìú Í≤ÄÏ¶ùÍ∏∞Í∞Ä Ïø†ÌÇ§Ïóê Ï†ÄÏû•Îê®
  // Îß§Î≤à ÏÉàÎ°úÏö¥ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ±ÌïòÏßÄÎßå ÏÑ∏ÏÖòÏùÄ Ïø†ÌÇ§Î•º ÌÜµÌï¥ ÏûêÎèôÏúºÎ°ú Ïú†ÏßÄÎê©ÎãàÎã§
  try {
    const client = createBrowserClient(SUPABASE_URL, SUPABASE_ANON_KEY)

    if (process.env.NODE_ENV === 'development') {
      console.log('‚úÖ Supabase browser client created with current session')
    }

    return client
  } catch (error) {
    console.error('‚ùå Failed to initialize Supabase client:', error)
    throw error
  }
}

/**
 * @deprecated Singleton caching removed - no longer needed
 * This function is kept for backwards compatibility but does nothing
 */
export const clearSupabaseCache = (): void => {
  if (process.env.NODE_ENV === 'development') {
    console.log('‚ÑπÔ∏è clearSupabaseCache called but singleton caching is disabled')
  }
}

// OAuth ÏΩúÎ∞±Ïö© ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ - getSupabaseClientÏôÄ ÎèôÏùºÌïòÍ≤å ÎèôÏûë
export const createCallbackClient = (): SupabaseClient => {
  if (process.env.NODE_ENV === 'development') {
    console.log('üîÑ Creating callback client with current session')
  }
  return getSupabaseClient()
}

// Ìï®Ïàò Ï∞∏Ï°∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ - Î™®Îì† utilsÏóêÏÑú supabase()Î°ú Ìò∏Ï∂ú
// Arrow functionÏúºÎ°ú Î≥ÄÍ≤ΩÌïòÏó¨ Turbopack HMR Ï∫êÏã± Ïù¥Ïäà Î∞©ÏßÄ
export const supabase = () => getSupabaseClient()

// ÌÉÄÏûÖ Ï†ïÏùò
export type Database = {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string
          username: string
          bio: string
          avatar_url: string | null
          is_private: boolean
          allow_follow: boolean
          created_at: string
          updated_at: string
        }
        Insert: {
          id: string
          username: string
          bio?: string
          avatar_url?: string | null
          is_private?: boolean
          allow_follow?: boolean
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          username?: string
          bio?: string
          avatar_url?: string | null
          is_private?: boolean
          allow_follow?: boolean
          created_at?: string
          updated_at?: string
        }
      }
      posts: {
        Row: {
          id: string
          title: string
          content: string
          excerpt: string | null
          author_id: string | null
          author_name: string
          category: string
          is_anonymous: boolean
          visibility: string
          likes_count: number
          comments_count: number
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          title: string
          content: string
          excerpt?: string | null
          author_id?: string | null
          author_name: string
          category: string
          is_anonymous?: boolean
          visibility?: string
          likes_count?: number
          comments_count?: number
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          title?: string
          content?: string
          excerpt?: string | null
          author_id?: string | null
          author_name?: string
          category?: string
          is_anonymous?: boolean
          visibility?: string
          likes_count?: number
          comments_count?: number
          created_at?: string
          updated_at?: string
        }
      }
      follows: {
        Row: {
          id: string
          follower_id: string
          following_id: string
          created_at: string
        }
        Insert: {
          id?: string
          follower_id: string
          following_id: string
          created_at?: string
        }
        Update: {
          id?: string
          follower_id?: string
          following_id?: string
          created_at?: string
        }
      }
      post_likes: {
        Row: {
          id: string
          user_id: string
          post_id: string
          created_at: string
        }
        Insert: {
          id?: string
          user_id: string
          post_id: string
          created_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          post_id?: string
          created_at?: string
        }
      }
      comments: {
        Row: {
          id: string
          post_id: string
          author_id: string
          author_name: string
          content: string
          is_anonymous: boolean
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          post_id: string
          author_id: string
          author_name: string
          content: string
          is_anonymous?: boolean
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          post_id?: string
          author_id?: string
          author_name?: string
          content?: string
          is_anonymous?: boolean
          created_at?: string
          updated_at?: string
        }
      }
    }
  }
}

export type Profile = Database['public']['Tables']['profiles']['Row']
export type Post = Database['public']['Tables']['posts']['Row']
export type Follow = Database['public']['Tables']['follows']['Row']
export type PostLike = Database['public']['Tables']['post_likes']['Row']
export type Comment = Database['public']['Tables']['comments']['Row']
